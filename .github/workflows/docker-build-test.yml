name: Test Docker Build

on:
  pull_request:
    branches:
      - main
    paths:
      - 'Dockerfile'
      - 'docker-compose.yml'
      - '.dockerignore'
      - 'package*.json'
      - 'apps/**'
      - 'packages/**'
      - 'tools/**'
      - '.github/workflows/docker-build-test.yml'
permissions:
  contents: read
  pull-requests: write  # Required for commenting on PRs
jobs:
  test-build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          ignore: DL3008,DL3009  # Ignore specific rules if needed

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: false
          tags: astromich:test-${{ github.event.pull_request.number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image structure
        run: |
          docker buildx build --load -t astromich:test-${{ github.event.pull_request.number }} .
          
          echo "## Docker Image Test Results üß™" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Test if the image was built successfully
          if docker image inspect astromich:test-${{ github.event.pull_request.number }} > /dev/null 2>&1; then
            echo "‚úÖ **Image built successfully**" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Image build failed**" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          # Check image size
          IMAGE_SIZE=$(docker image inspect astromich:test-${{ github.event.pull_request.number }} --format='{{.Size}}' | numfmt --to=iec-i --suffix=B)
          echo "üì¶ **Image size:** $IMAGE_SIZE" >> $GITHUB_STEP_SUMMARY
          
          # Test if required directories exist
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Directory Structure Check" >> $GITHUB_STEP_SUMMARY
          docker run --rm astromich:test-${{ github.event.pull_request.number }} ls -la /app/dist > /dev/null 2>&1 && echo "‚úÖ /app/dist exists" >> $GITHUB_STEP_SUMMARY || echo "‚ùå /app/dist missing" >> $GITHUB_STEP_SUMMARY
          docker run --rm astromich:test-${{ github.event.pull_request.number }} ls -la /app/config > /dev/null 2>&1 && echo "‚úÖ /app/config exists" >> $GITHUB_STEP_SUMMARY || echo "‚ùå /app/config missing" >> $GITHUB_STEP_SUMMARY
          docker run --rm astromich:test-${{ github.event.pull_request.number }} ls -la /app/logs > /dev/null 2>&1 && echo "‚úÖ /app/logs exists" >> $GITHUB_STEP_SUMMARY || echo "‚ùå /app/logs missing" >> $GITHUB_STEP_SUMMARY
          docker run --rm astromich:test-${{ github.event.pull_request.number }} ls -la /app/sidecars > /dev/null 2>&1 && echo "‚úÖ /app/sidecars exists" >> $GITHUB_STEP_SUMMARY || echo "‚ùå /app/sidecars missing" >> $GITHUB_STEP_SUMMARY
          
          # Check if startup script is executable
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Startup Script Check" >> $GITHUB_STEP_SUMMARY
          docker run --rm --entrypoint="" astromich:test-${{ github.event.pull_request.number }} test -x /app/startup.sh && echo "‚úÖ startup.sh is executable" >> $GITHUB_STEP_SUMMARY || echo "‚ùå startup.sh is not executable" >> $GITHUB_STEP_SUMMARY

      - name: Run container smoke test
        run: |
          # Start container with minimal config
          docker run -d \
            --name astromich-test \
            -p 5000:5000 \
            -e NODE_ENV=production \
            -e DATABASE_URL=postgresql://test:test@localhost:5432/test \
            astromich:test-${{ github.event.pull_request.number }}
          
          # Give it time to start (or fail)
          sleep 10
          
          # Check if container is still running
          if docker ps | grep -q astromich-test; then
            echo "‚úÖ Container started successfully" >> $GITHUB_STEP_SUMMARY
            docker logs astromich-test
          else
            echo "‚ùå Container failed to start" >> $GITHUB_STEP_SUMMARY
            docker logs astromich-test
            exit 1
          fi
          
          # Cleanup
          docker stop astromich-test || true
          docker rm astromich-test || true

      - name: Scan for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: astromich:test-${{ github.event.pull_request.number }}
          format: 'table'
          exit-code: '0'  # Don't fail the build on vulnerabilities (for now)
          severity: 'CRITICAL,HIGH'

      - name: Comment PR
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const output = `#### Docker Build Test üê≥
            
            ‚úÖ **Docker image builds successfully!**
            
            View the full test results in the [Actions summary](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
