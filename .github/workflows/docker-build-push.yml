name: Build and Push Docker Image

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write  # For uploading SARIF files
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript type checking
        run: npm run check

      - name: Build application
        run: npm run build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr,prefix=pr-
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{date 'YYYYMMDD-HHmmss'}},enable={{is_default_branch}}

      - name: Build and push Docker image (main branch)
        id: build-main
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

      - name: Build Docker image (PR)
        id: build-pr
        if: github.event_name == 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: false
          load: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-scan
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ github.event_name != 'pull_request' && format('{0}/{1}@{2}', env.REGISTRY, env.IMAGE_NAME, steps.build-main.outputs.digest) || format('{0}/{1}:pr-scan', env.REGISTRY, env.IMAGE_NAME) }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'  # Fail the build on critical vulnerabilities

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy'

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        if: github.event_name != 'pull_request'  # Only for pushed images
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build-main.outputs.digest }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        if: github.event_name != 'pull_request'  # Only for pushed images
        with:
          name: sbom-${{ github.sha }}
          path: sbom.spdx.json
          retention-days: 30

      - name: Export Docker image as artifact
        if: github.event_name == 'pull_request'
        run: |
          docker save ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-scan | gzip > astromich-pr-${{ github.event.pull_request.number }}-${{ github.sha }}.tar.gz

      - name: Upload Docker image artifact (PR)
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-pr-${{ github.event.pull_request.number }}
          path: astromich-pr-${{ github.event.pull_request.number }}-${{ github.sha }}.tar.gz
          retention-days: 7

      - name: Create application snapshot
        run: |
          mkdir -p snapshot
          tar -czf snapshot/astromich-snapshot-${{ github.sha }}.tar.gz \
            --exclude=node_modules \
            --exclude=.git \
            --exclude=snapshot \
            dist/

      - name: Upload application snapshot
        uses: actions/upload-artifact@v4
        with:
          name: app-snapshot-${{ github.sha }}
          path: snapshot/astromich-snapshot-${{ github.sha }}.tar.gz
          retention-days: 30

      - name: Create deployment summary
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "## PR Build Complete ðŸ”¨" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**PR:** #${{ github.event.pull_request.number }}" >> $GITHUB_STEP_SUMMARY
            echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Artifacts" >> $GITHUB_STEP_SUMMARY
            echo "- Docker image: \`docker-image-pr-${{ github.event.pull_request.number }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- Application snapshot: \`app-snapshot-${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Security Scan" >> $GITHUB_STEP_SUMMARY
            echo "âœ… Passed Trivy vulnerability scan" >> $GITHUB_STEP_SUMMARY
          else
            echo "## Docker Image Published ðŸš€" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
            echo "**Digest:** \`${{ steps.build-main.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Tags:**" >> $GITHUB_STEP_SUMMARY
            echo "${{ steps.meta.outputs.tags }}" | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
            echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Security Scan" >> $GITHUB_STEP_SUMMARY
            echo "âœ… Passed Trivy vulnerability scan" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Artifacts" >> $GITHUB_STEP_SUMMARY
            echo "- SBOM: \`sbom-${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- Application snapshot: \`app-snapshot-${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          fi